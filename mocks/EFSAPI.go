// Code generated by mockery v1.0.0
package mocks

import aws "github.com/aws/aws-sdk-go/aws"
import efs "github.com/aws/aws-sdk-go/service/efs"

import mock "github.com/stretchr/testify/mock"
import request "github.com/aws/aws-sdk-go/aws/request"

// EFSAPI is an autogenerated mock type for the EFSAPI type
type EFSAPI struct {
	mock.Mock
}

// CreateFileSystem provides a mock function with given fields: _a0
func (_m *EFSAPI) CreateFileSystem(_a0 *efs.CreateFileSystemInput) (*efs.FileSystemDescription, error) {
	ret := _m.Called(_a0)

	var r0 *efs.FileSystemDescription
	if rf, ok := ret.Get(0).(func(*efs.CreateFileSystemInput) *efs.FileSystemDescription); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*efs.FileSystemDescription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*efs.CreateFileSystemInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateFileSystemRequest provides a mock function with given fields: _a0
func (_m *EFSAPI) CreateFileSystemRequest(_a0 *efs.CreateFileSystemInput) (*request.Request, *efs.FileSystemDescription) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*efs.CreateFileSystemInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *efs.FileSystemDescription
	if rf, ok := ret.Get(1).(func(*efs.CreateFileSystemInput) *efs.FileSystemDescription); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*efs.FileSystemDescription)
		}
	}

	return r0, r1
}

// CreateFileSystemWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *EFSAPI) CreateFileSystemWithContext(_a0 aws.Context, _a1 *efs.CreateFileSystemInput, _a2 ...request.Option) (*efs.FileSystemDescription, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *efs.FileSystemDescription
	if rf, ok := ret.Get(0).(func(aws.Context, *efs.CreateFileSystemInput, ...request.Option) *efs.FileSystemDescription); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*efs.FileSystemDescription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(aws.Context, *efs.CreateFileSystemInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateMountTarget provides a mock function with given fields: _a0
func (_m *EFSAPI) CreateMountTarget(_a0 *efs.CreateMountTargetInput) (*efs.MountTargetDescription, error) {
	ret := _m.Called(_a0)

	var r0 *efs.MountTargetDescription
	if rf, ok := ret.Get(0).(func(*efs.CreateMountTargetInput) *efs.MountTargetDescription); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*efs.MountTargetDescription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*efs.CreateMountTargetInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateMountTargetRequest provides a mock function with given fields: _a0
func (_m *EFSAPI) CreateMountTargetRequest(_a0 *efs.CreateMountTargetInput) (*request.Request, *efs.MountTargetDescription) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*efs.CreateMountTargetInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *efs.MountTargetDescription
	if rf, ok := ret.Get(1).(func(*efs.CreateMountTargetInput) *efs.MountTargetDescription); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*efs.MountTargetDescription)
		}
	}

	return r0, r1
}

// CreateMountTargetWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *EFSAPI) CreateMountTargetWithContext(_a0 aws.Context, _a1 *efs.CreateMountTargetInput, _a2 ...request.Option) (*efs.MountTargetDescription, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *efs.MountTargetDescription
	if rf, ok := ret.Get(0).(func(aws.Context, *efs.CreateMountTargetInput, ...request.Option) *efs.MountTargetDescription); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*efs.MountTargetDescription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(aws.Context, *efs.CreateMountTargetInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTags provides a mock function with given fields: _a0
func (_m *EFSAPI) CreateTags(_a0 *efs.CreateTagsInput) (*efs.CreateTagsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *efs.CreateTagsOutput
	if rf, ok := ret.Get(0).(func(*efs.CreateTagsInput) *efs.CreateTagsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*efs.CreateTagsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*efs.CreateTagsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTagsRequest provides a mock function with given fields: _a0
func (_m *EFSAPI) CreateTagsRequest(_a0 *efs.CreateTagsInput) (*request.Request, *efs.CreateTagsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*efs.CreateTagsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *efs.CreateTagsOutput
	if rf, ok := ret.Get(1).(func(*efs.CreateTagsInput) *efs.CreateTagsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*efs.CreateTagsOutput)
		}
	}

	return r0, r1
}

// CreateTagsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *EFSAPI) CreateTagsWithContext(_a0 aws.Context, _a1 *efs.CreateTagsInput, _a2 ...request.Option) (*efs.CreateTagsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *efs.CreateTagsOutput
	if rf, ok := ret.Get(0).(func(aws.Context, *efs.CreateTagsInput, ...request.Option) *efs.CreateTagsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*efs.CreateTagsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(aws.Context, *efs.CreateTagsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteFileSystem provides a mock function with given fields: _a0
func (_m *EFSAPI) DeleteFileSystem(_a0 *efs.DeleteFileSystemInput) (*efs.DeleteFileSystemOutput, error) {
	ret := _m.Called(_a0)

	var r0 *efs.DeleteFileSystemOutput
	if rf, ok := ret.Get(0).(func(*efs.DeleteFileSystemInput) *efs.DeleteFileSystemOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*efs.DeleteFileSystemOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*efs.DeleteFileSystemInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteFileSystemRequest provides a mock function with given fields: _a0
func (_m *EFSAPI) DeleteFileSystemRequest(_a0 *efs.DeleteFileSystemInput) (*request.Request, *efs.DeleteFileSystemOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*efs.DeleteFileSystemInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *efs.DeleteFileSystemOutput
	if rf, ok := ret.Get(1).(func(*efs.DeleteFileSystemInput) *efs.DeleteFileSystemOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*efs.DeleteFileSystemOutput)
		}
	}

	return r0, r1
}

// DeleteFileSystemWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *EFSAPI) DeleteFileSystemWithContext(_a0 aws.Context, _a1 *efs.DeleteFileSystemInput, _a2 ...request.Option) (*efs.DeleteFileSystemOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *efs.DeleteFileSystemOutput
	if rf, ok := ret.Get(0).(func(aws.Context, *efs.DeleteFileSystemInput, ...request.Option) *efs.DeleteFileSystemOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*efs.DeleteFileSystemOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(aws.Context, *efs.DeleteFileSystemInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteMountTarget provides a mock function with given fields: _a0
func (_m *EFSAPI) DeleteMountTarget(_a0 *efs.DeleteMountTargetInput) (*efs.DeleteMountTargetOutput, error) {
	ret := _m.Called(_a0)

	var r0 *efs.DeleteMountTargetOutput
	if rf, ok := ret.Get(0).(func(*efs.DeleteMountTargetInput) *efs.DeleteMountTargetOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*efs.DeleteMountTargetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*efs.DeleteMountTargetInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteMountTargetRequest provides a mock function with given fields: _a0
func (_m *EFSAPI) DeleteMountTargetRequest(_a0 *efs.DeleteMountTargetInput) (*request.Request, *efs.DeleteMountTargetOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*efs.DeleteMountTargetInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *efs.DeleteMountTargetOutput
	if rf, ok := ret.Get(1).(func(*efs.DeleteMountTargetInput) *efs.DeleteMountTargetOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*efs.DeleteMountTargetOutput)
		}
	}

	return r0, r1
}

// DeleteMountTargetWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *EFSAPI) DeleteMountTargetWithContext(_a0 aws.Context, _a1 *efs.DeleteMountTargetInput, _a2 ...request.Option) (*efs.DeleteMountTargetOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *efs.DeleteMountTargetOutput
	if rf, ok := ret.Get(0).(func(aws.Context, *efs.DeleteMountTargetInput, ...request.Option) *efs.DeleteMountTargetOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*efs.DeleteMountTargetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(aws.Context, *efs.DeleteMountTargetInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTags provides a mock function with given fields: _a0
func (_m *EFSAPI) DeleteTags(_a0 *efs.DeleteTagsInput) (*efs.DeleteTagsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *efs.DeleteTagsOutput
	if rf, ok := ret.Get(0).(func(*efs.DeleteTagsInput) *efs.DeleteTagsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*efs.DeleteTagsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*efs.DeleteTagsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTagsRequest provides a mock function with given fields: _a0
func (_m *EFSAPI) DeleteTagsRequest(_a0 *efs.DeleteTagsInput) (*request.Request, *efs.DeleteTagsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*efs.DeleteTagsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *efs.DeleteTagsOutput
	if rf, ok := ret.Get(1).(func(*efs.DeleteTagsInput) *efs.DeleteTagsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*efs.DeleteTagsOutput)
		}
	}

	return r0, r1
}

// DeleteTagsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *EFSAPI) DeleteTagsWithContext(_a0 aws.Context, _a1 *efs.DeleteTagsInput, _a2 ...request.Option) (*efs.DeleteTagsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *efs.DeleteTagsOutput
	if rf, ok := ret.Get(0).(func(aws.Context, *efs.DeleteTagsInput, ...request.Option) *efs.DeleteTagsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*efs.DeleteTagsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(aws.Context, *efs.DeleteTagsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeFileSystems provides a mock function with given fields: _a0
func (_m *EFSAPI) DescribeFileSystems(_a0 *efs.DescribeFileSystemsInput) (*efs.DescribeFileSystemsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *efs.DescribeFileSystemsOutput
	if rf, ok := ret.Get(0).(func(*efs.DescribeFileSystemsInput) *efs.DescribeFileSystemsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*efs.DescribeFileSystemsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*efs.DescribeFileSystemsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeFileSystemsRequest provides a mock function with given fields: _a0
func (_m *EFSAPI) DescribeFileSystemsRequest(_a0 *efs.DescribeFileSystemsInput) (*request.Request, *efs.DescribeFileSystemsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*efs.DescribeFileSystemsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *efs.DescribeFileSystemsOutput
	if rf, ok := ret.Get(1).(func(*efs.DescribeFileSystemsInput) *efs.DescribeFileSystemsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*efs.DescribeFileSystemsOutput)
		}
	}

	return r0, r1
}

// DescribeFileSystemsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *EFSAPI) DescribeFileSystemsWithContext(_a0 aws.Context, _a1 *efs.DescribeFileSystemsInput, _a2 ...request.Option) (*efs.DescribeFileSystemsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *efs.DescribeFileSystemsOutput
	if rf, ok := ret.Get(0).(func(aws.Context, *efs.DescribeFileSystemsInput, ...request.Option) *efs.DescribeFileSystemsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*efs.DescribeFileSystemsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(aws.Context, *efs.DescribeFileSystemsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeMountTargetSecurityGroups provides a mock function with given fields: _a0
func (_m *EFSAPI) DescribeMountTargetSecurityGroups(_a0 *efs.DescribeMountTargetSecurityGroupsInput) (*efs.DescribeMountTargetSecurityGroupsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *efs.DescribeMountTargetSecurityGroupsOutput
	if rf, ok := ret.Get(0).(func(*efs.DescribeMountTargetSecurityGroupsInput) *efs.DescribeMountTargetSecurityGroupsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*efs.DescribeMountTargetSecurityGroupsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*efs.DescribeMountTargetSecurityGroupsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeMountTargetSecurityGroupsRequest provides a mock function with given fields: _a0
func (_m *EFSAPI) DescribeMountTargetSecurityGroupsRequest(_a0 *efs.DescribeMountTargetSecurityGroupsInput) (*request.Request, *efs.DescribeMountTargetSecurityGroupsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*efs.DescribeMountTargetSecurityGroupsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *efs.DescribeMountTargetSecurityGroupsOutput
	if rf, ok := ret.Get(1).(func(*efs.DescribeMountTargetSecurityGroupsInput) *efs.DescribeMountTargetSecurityGroupsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*efs.DescribeMountTargetSecurityGroupsOutput)
		}
	}

	return r0, r1
}

// DescribeMountTargetSecurityGroupsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *EFSAPI) DescribeMountTargetSecurityGroupsWithContext(_a0 aws.Context, _a1 *efs.DescribeMountTargetSecurityGroupsInput, _a2 ...request.Option) (*efs.DescribeMountTargetSecurityGroupsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *efs.DescribeMountTargetSecurityGroupsOutput
	if rf, ok := ret.Get(0).(func(aws.Context, *efs.DescribeMountTargetSecurityGroupsInput, ...request.Option) *efs.DescribeMountTargetSecurityGroupsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*efs.DescribeMountTargetSecurityGroupsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(aws.Context, *efs.DescribeMountTargetSecurityGroupsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeMountTargets provides a mock function with given fields: _a0
func (_m *EFSAPI) DescribeMountTargets(_a0 *efs.DescribeMountTargetsInput) (*efs.DescribeMountTargetsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *efs.DescribeMountTargetsOutput
	if rf, ok := ret.Get(0).(func(*efs.DescribeMountTargetsInput) *efs.DescribeMountTargetsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*efs.DescribeMountTargetsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*efs.DescribeMountTargetsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeMountTargetsRequest provides a mock function with given fields: _a0
func (_m *EFSAPI) DescribeMountTargetsRequest(_a0 *efs.DescribeMountTargetsInput) (*request.Request, *efs.DescribeMountTargetsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*efs.DescribeMountTargetsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *efs.DescribeMountTargetsOutput
	if rf, ok := ret.Get(1).(func(*efs.DescribeMountTargetsInput) *efs.DescribeMountTargetsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*efs.DescribeMountTargetsOutput)
		}
	}

	return r0, r1
}

// DescribeMountTargetsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *EFSAPI) DescribeMountTargetsWithContext(_a0 aws.Context, _a1 *efs.DescribeMountTargetsInput, _a2 ...request.Option) (*efs.DescribeMountTargetsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *efs.DescribeMountTargetsOutput
	if rf, ok := ret.Get(0).(func(aws.Context, *efs.DescribeMountTargetsInput, ...request.Option) *efs.DescribeMountTargetsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*efs.DescribeMountTargetsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(aws.Context, *efs.DescribeMountTargetsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeTags provides a mock function with given fields: _a0
func (_m *EFSAPI) DescribeTags(_a0 *efs.DescribeTagsInput) (*efs.DescribeTagsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *efs.DescribeTagsOutput
	if rf, ok := ret.Get(0).(func(*efs.DescribeTagsInput) *efs.DescribeTagsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*efs.DescribeTagsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*efs.DescribeTagsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeTagsRequest provides a mock function with given fields: _a0
func (_m *EFSAPI) DescribeTagsRequest(_a0 *efs.DescribeTagsInput) (*request.Request, *efs.DescribeTagsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*efs.DescribeTagsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *efs.DescribeTagsOutput
	if rf, ok := ret.Get(1).(func(*efs.DescribeTagsInput) *efs.DescribeTagsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*efs.DescribeTagsOutput)
		}
	}

	return r0, r1
}

// DescribeTagsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *EFSAPI) DescribeTagsWithContext(_a0 aws.Context, _a1 *efs.DescribeTagsInput, _a2 ...request.Option) (*efs.DescribeTagsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *efs.DescribeTagsOutput
	if rf, ok := ret.Get(0).(func(aws.Context, *efs.DescribeTagsInput, ...request.Option) *efs.DescribeTagsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*efs.DescribeTagsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(aws.Context, *efs.DescribeTagsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyMountTargetSecurityGroups provides a mock function with given fields: _a0
func (_m *EFSAPI) ModifyMountTargetSecurityGroups(_a0 *efs.ModifyMountTargetSecurityGroupsInput) (*efs.ModifyMountTargetSecurityGroupsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *efs.ModifyMountTargetSecurityGroupsOutput
	if rf, ok := ret.Get(0).(func(*efs.ModifyMountTargetSecurityGroupsInput) *efs.ModifyMountTargetSecurityGroupsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*efs.ModifyMountTargetSecurityGroupsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*efs.ModifyMountTargetSecurityGroupsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyMountTargetSecurityGroupsRequest provides a mock function with given fields: _a0
func (_m *EFSAPI) ModifyMountTargetSecurityGroupsRequest(_a0 *efs.ModifyMountTargetSecurityGroupsInput) (*request.Request, *efs.ModifyMountTargetSecurityGroupsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*efs.ModifyMountTargetSecurityGroupsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *efs.ModifyMountTargetSecurityGroupsOutput
	if rf, ok := ret.Get(1).(func(*efs.ModifyMountTargetSecurityGroupsInput) *efs.ModifyMountTargetSecurityGroupsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*efs.ModifyMountTargetSecurityGroupsOutput)
		}
	}

	return r0, r1
}

// ModifyMountTargetSecurityGroupsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *EFSAPI) ModifyMountTargetSecurityGroupsWithContext(_a0 aws.Context, _a1 *efs.ModifyMountTargetSecurityGroupsInput, _a2 ...request.Option) (*efs.ModifyMountTargetSecurityGroupsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *efs.ModifyMountTargetSecurityGroupsOutput
	if rf, ok := ret.Get(0).(func(aws.Context, *efs.ModifyMountTargetSecurityGroupsInput, ...request.Option) *efs.ModifyMountTargetSecurityGroupsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*efs.ModifyMountTargetSecurityGroupsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(aws.Context, *efs.ModifyMountTargetSecurityGroupsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
